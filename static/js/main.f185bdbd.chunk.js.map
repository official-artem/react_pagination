{"version":3,"sources":["components/NavigationList/NavigationList.tsx","utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["NavigationList","list","currentPage","onPageChange","map","item","className","cn","active","href","onClick","getNumbers","from","to","numbers","n","push","Pagination","total","perPage","navListLength","Math","ceil","isLeftButtonAvailable","isRightButtonAvailable","navigationList","disabled","items","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","maxItem","Number","length","minValue","maxValue","displayItems","slice","id","value","onChange","event","target","htmlFor","pageId","ReactDOM","render","document","getElementById"],"mappings":"kNASaA,EAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEA,OACE,mCAEIF,EAAKG,KAAI,SAAAC,GAAI,OACX,oBAEEC,UAAWC,IACT,YACA,CAAEC,OAAQH,IAASH,IAJvB,SAOE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAI,WAAMJ,GACVK,QAAS,kBAAMP,EAAaE,IAJ9B,SAMGA,KAZEA,SCnBV,SAASM,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,ECKF,IAAMG,EAAwB,SAAC,GAK/B,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAjB,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMiB,EAAgBC,KAAKC,KAAKJ,EAAQC,GAClCI,EAAwBrB,GAAe,EACvCsB,EAAyBtB,GAAekB,EACxCK,EAAiBd,EAAW,EAAGS,GAErC,OACE,mCACE,qBAAId,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEmB,SAAUH,IAFd,SAKE,mBACE,UAAQ,WACRjB,UAAU,YACVG,KAAK,QACL,gBAAec,EACfb,QAAS,WACHR,EAAc,GAChBC,EAAaD,EAAc,IAPjC,oBAcF,cAAC,EAAD,CACED,KAAMwB,EACNvB,YAAaA,EACbC,aAAcA,IAEhB,oBAAIG,UAAWC,IACb,YACA,CAAEmB,SAAUF,IAFd,SAKE,mBACE,UAAQ,WACRlB,UAAU,YACVG,KAAK,QACL,gBAAee,EACfd,QAAS,WACHR,EAAckB,GAChBjB,EAAaD,EAAc,IAPjC,0BCjDJyB,EAAQhB,EAAW,EAAG,IACzBP,KAAI,SAAAW,GAAC,qBAAYA,MAEPa,EAAgB,WAC3B,IAEA,EAAsCC,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB4B,EAApB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACMC,EAAUC,OAAOH,GAAgB7B,EAAcyB,EAAMQ,OACvDD,OAAOH,GAAgB7B,EACvByB,EAAMQ,OAGJC,EAAWH,GADKA,GAAY/B,EAAc,IAAM6B,GAEhDM,EAAWN,EAAe7B,EAC1BoC,EAAeX,EAAMY,MAAMF,EAAWN,EAAcM,GAgB1D,OACE,sBAAK/B,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWJ,EADX,mBACiCkC,EAAW,EAD5C,cACmDH,EADnD,eACiEN,EAAMQ,OADvE,OAIA,sBAAK7B,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRkC,GAAG,kBACHlC,UAAU,eACVmC,MAAOV,EACPW,SAAU,SAACC,GAvBC,IAACF,MAuBuBE,EAAMC,OAAOH,SAtB3CV,IACZC,EAAgBS,GAEhBX,EAvBgB,KAqCZ,UAOE,wBAAQW,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,qBAIJ,uBAAOI,QAAQ,kBAAkBvC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEY,MAAOS,EAAMQ,OACbhB,QAASY,EACT7B,YAAaA,EACbC,aA/Ca,SAAC2C,GACdA,IAAW5C,GACb4B,EAAegB,MAgDdR,EAAalC,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,UCxEf0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f185bdbd.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  list: number[];\n  currentPage: number;\n  onPageChange: (item: number) => void;\n};\n\nexport const NavigationList: React.FC<Props> = ({\n  list,\n  currentPage,\n  onPageChange,\n}) => {\n  return (\n    <>\n      {\n        list.map(item => (\n          <li\n            key={item}\n            className={cn(\n              'page-item',\n              { active: item === currentPage },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${item}`}\n              onClick={() => onPageChange(item)}\n            >\n              {item}\n            </a>\n          </li>\n        ))\n      }\n    </>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { NavigationList } from '../NavigationList/NavigationList';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number;\n  perPage: number\n  currentPage: number\n  onPageChange: (pageId: number) => void;\n}\n\nexport const Pagination: FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const navListLength = Math.ceil(total / perPage);\n  const isLeftButtonAvailable = currentPage <= 1;\n  const isRightButtonAvailable = currentPage >= navListLength;\n  const navigationList = getNumbers(1, navListLength);\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={cn(\n          'page-item',\n          { disabled: isLeftButtonAvailable },\n        )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isLeftButtonAvailable}\n            onClick={() => {\n              if (currentPage > 1) {\n                onPageChange(currentPage - 1);\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n        <NavigationList\n          list={navigationList}\n          currentPage={currentPage}\n          onPageChange={onPageChange}\n        />\n        <li className={cn(\n          'page-item',\n          { disabled: isRightButtonAvailable },\n        )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isRightButtonAvailable}\n            onClick={() => {\n              if (currentPage < navListLength) {\n                onPageChange(currentPage + 1);\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const defaultPage = 1;\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const maxItem = Number(itemsPerPage) * currentPage < items.length\n    ? Number(itemsPerPage) * currentPage\n    : items.length;\n\n  const itemsInColumn = maxItem - ((currentPage - 1) * +itemsPerPage);\n  const minValue = maxItem - itemsInColumn;\n  const maxValue = itemsPerPage * currentPage;\n  const displayItems = items.slice(maxValue - itemsPerPage, maxValue);\n\n  const handlePage = (pageId: number) => {\n    if (pageId !== currentPage) {\n      setCurrentPage(pageId);\n    }\n  };\n\n  const handlePerPage = (value: number) => {\n    if (value !== itemsPerPage) {\n      setItemsPerPage(value);\n\n      setCurrentPage(defaultPage);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${minValue + 1} - ${maxItem} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={(event) => handlePerPage(+event.target.value)}\n          >\n            <option value={3}>3</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={handlePage}\n      />\n\n      {displayItems.map(item => (\n        <li\n          key={item}\n          data-cy=\"item\"\n        >\n          {item}\n        </li>\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}