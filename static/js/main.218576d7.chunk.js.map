{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","natigationItems","Array","from","length","Math","ceil","_","i","map","item","className","cn","active","href","onClick","navListLength","disabled","fill","sort","a","b","maxValue","items","to","numbers","n","push","getNumbers","App","useState","setCurrentPage","perPageSelector","setPerPageSelector","maxItem","Number","minValue","id","value","onChange","event","target","htmlFor","pageId","ReactDOM","render","document","getElementById"],"mappings":"kNAUaA,EAAwB,SAAC,GAK/B,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EACFC,MAAMC,KACN,CAAEC,OAAQC,KAAKC,KAAKT,EAAQC,KAC5B,SAACS,EAAGC,GAAJ,OAAUA,EAAI,KAEbC,KAAI,SAAAC,GAAI,OACP,oBAEEC,UAAWC,IACT,YACA,CAAEC,OAAQH,IAASX,IAJvB,SAOE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAI,WAAMJ,GACVK,QAAS,kBAAMf,EAAaU,IAJ9B,SAMGA,KAZEA,MAiBPM,EAAgBf,EAAgBG,OAEtC,OACE,qCACE,qBAAIO,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEK,SAAUlB,GAAe,IAF7B,SAKE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAK,QACL,gBAAef,GAAe,EAC9BgB,QAAS,WACHhB,EAAc,GAChBC,EAAaD,EAAc,IAPjC,oBAcDE,EACD,oBAAIU,UAAWC,IACb,YACA,CAAEK,SAAUlB,GAAeiB,IAF7B,SAKE,mBACE,UAAQ,WACRL,UAAU,YACVG,KAAK,QACL,gBAAef,GAAeiB,EAC9BD,QAAS,WACHhB,EAAciB,GAChBhB,EAAaD,EAAc,IAPjC,uBAeJ,6BACGG,MAAMJ,GACJoB,KAAK,GACLT,KAAI,SAACF,EAAGC,GAAJ,OAAUA,KACdW,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KACnBX,KAAI,SAAAC,GACH,IAAMY,EAAWxB,EAAUC,EAE3B,OAAIuB,EAAWZ,EAAOb,EACb,KAIP,oBAEE,UAAQ,OAFV,wBAIWyB,EAAWZ,IAHfA,YC7FrB,IAAMa,ECNC,SAAoBpB,EAAcqB,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIvB,EAAMuB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBnB,KAAI,SAAAiB,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAO/B,EAAP,KAAoBgC,EAApB,KACA,EAA8CD,mBAAS,KAAvD,mBAAOE,EAAP,KAAwBC,EAAxB,KACMC,EAAUC,OAAOH,GAAmBjC,EAAcwB,EAAMnB,OAC1D+B,OAAOH,GAAmBjC,EAC1BwB,EAAMnB,OAGJgC,EAAWF,GADKA,GAAYnC,EAAc,IAAMiC,GAatD,OACE,sBAAKrB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWZ,EADX,mBACiCqC,EAAW,EAD5C,cACmDF,EADnD,eACiEX,EAAMnB,OADvE,OAIA,sBAAKO,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR0B,GAAG,kBACH1B,UAAU,eACV2B,MAAON,EACPO,SAAU,SAACC,GAAD,OArBGF,EAqBsBE,EAAMC,OAAOH,MApBxDL,EAAmBK,QAEnBP,EAAe,GAHK,IAACO,GAgBf,UAOE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB/B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEd,MAAO0B,EAAMnB,OACbN,QAASqC,OAAOH,GAChBjC,YAAaA,EACbC,aA3Ca,SAAC2C,GAClBZ,EAAeY,UEjBnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.218576d7.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  total: number;\n  perPage: number\n  currentPage: number\n  onPageChange: (pageId: number) => void;\n}\n\nexport const Pagination: FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const natigationItems\n    = Array.from(\n      { length: Math.ceil(total / perPage) },\n      (_, i) => i + 1,\n    )\n      .map(item => (\n        <li\n          key={item}\n          className={cn(\n            'page-item',\n            { active: item === currentPage },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${item}`}\n            onClick={() => onPageChange(item)}\n          >\n            {item}\n          </a>\n        </li>\n      ));\n\n  const navListLength = natigationItems.length;\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={cn(\n          'page-item',\n          { disabled: currentPage <= 1 },\n        )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage <= 1}\n            onClick={() => {\n              if (currentPage > 1) {\n                onPageChange(currentPage - 1);\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n        {natigationItems}\n        <li className={cn(\n          'page-item',\n          { disabled: currentPage >= navListLength },\n        )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage >= navListLength}\n            onClick={() => {\n              if (currentPage < navListLength) {\n                onPageChange(currentPage + 1);\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {Array(perPage)\n          .fill(0)\n          .map((_, i) => i)\n          .sort((a, b) => b - a)\n          .map(item => {\n            const maxValue = perPage * currentPage;\n\n            if (maxValue - item > total) {\n              return null;\n            }\n\n            return (\n              <li\n                key={item}\n                data-cy=\"item\"\n              >\n                {`Item ${maxValue - item}`}\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPageSelector, setPerPageSelector] = useState('5');\n  const maxItem = Number(perPageSelector) * currentPage < items.length\n    ? Number(perPageSelector) * currentPage\n    : items.length;\n\n  const itemsInColumn = maxItem - ((currentPage - 1) * +perPageSelector);\n  const minValue = maxItem - itemsInColumn;\n\n  const handlePage = (pageId: number) => {\n    setCurrentPage(pageId);\n  };\n\n  const handlePerPage = (value: string) => {\n    setPerPageSelector(value);\n\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${minValue + 1} - ${maxItem} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPageSelector}\n            onChange={(event) => handlePerPage(event.target.value)}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={Number(perPageSelector)}\n        currentPage={currentPage}\n        onPageChange={handlePage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}